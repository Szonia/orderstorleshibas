import { Request, Response } from "express";
import { db } from "../firebase";
import { ref, get, set, remove } from "firebase/database";

const CARTS_REF = "carts";

/**
 * üîπ Kos√°r lek√©r√©se
 */
export const getCart = async (req: Request, res: Response) => {
  const { userId } = req.params;
  try {
    const snapshot = await db.ref(`${CARTS_REF}/${userId}`).get();  // Correctly use db.ref() to get a snapshot
    if (!snapshot.exists()) {
      return res.json({ items: [] });  // Return empty cart if no data exists
    }
    return res.json(snapshot.val());  // Return the cart data from snapshot
  } catch (error) {
    console.error("‚ùå Error occurred while getting cart:", error);
    return res.status(500).json({ error: "Hiba t√∂rt√©nt a kos√°r lek√©r√©sekor." });  // Return error message on failure
  }
};

/**
 * üîπ Term√©k hozz√°ad√°sa a kos√°rhoz
 */
export const addToCart = async (req: Request, res: Response) => {
  const { userId, productId, quantity } = req.body;
  try {
    const cartRef = db.ref(`${CARTS_REF}/${userId}`);
    const snapshot = await cartRef.get();
    let cart: { items: { productId: string; quantity: number }[] } = { items: [] };

    // Ha l√©tezik kos√°r, t√∂lts√ºk be az adatokat
    if (snapshot.exists()) {
      cart = snapshot.val();
    }

    // Ellen≈ërizz√ºk, hogy a term√©k m√°r benne van-e a kos√°rban
    const existingItem = cart.items.find((item) => item.productId === productId);
    if (existingItem) {
      existingItem.quantity += quantity;  // Ha van, n√∂velj√ºk a mennyis√©get
    } else {
      cart.items.push({ productId, quantity });  // Ha nincs, hozz√°adjuk az √∫j term√©ket
    }

    // Friss√≠tj√ºk a kosarat
    await cartRef.set(cart);

    return res.json(cart);  // Visszak√ºldj√ºk az √∫j kosarat
  } catch (error) {
    console.error("‚ùå Hiba t√∂rt√©nt a kos√°r friss√≠t√©sekor:", error);
    return res.status(500).json({ error: "Hiba t√∂rt√©nt a kos√°r friss√≠t√©sekor." });
  }
};

/**
 * üîπ Kos√°r friss√≠t√©se (√∫j term√©kek hozz√°ad√°sa vagy megl√©v≈ë m√≥dos√≠t√°sa)
 */
export const updateCart = async (req: Request, res: Response): Promise<Response> => {
  const { userId } = req.params;
  const { items } = req.body;  // Az √∫j term√©kek, amiket be akarunk tenni a kos√°rba

  try {
    const cartRef = db.ref(`${CARTS_REF}/${userId}`);
    await cartRef.set({ items });  // Friss√≠tj√ºk a kosarat
    return res.json({ message: "Kos√°r friss√≠tve." });
  } catch (error) {
    console.error("‚ùå Hiba t√∂rt√©nt a kos√°r friss√≠t√©sekor:", error);
    return res.status(500).json({ error: "Hiba t√∂rt√©nt a kos√°r friss√≠t√©sekor." });
  }
};

/**
 * üîπ Kos√°r t√∂rl√©se
 * Ha term√©kId van, akkor a term√©ket t√∂r√∂lj√ºk, ha nincs, akkor az eg√©sz kosarat t√∂r√∂lj√ºk.
 */
export const deleteCart = async (req: Request, res: Response) => {
  const { userId, productId } = req.params;

  try {
    // Kos√°r lek√©r√©se
    const cartRef = db.ref(`${CARTS_REF}/${userId}`);
    const snapshot = await cartRef.get();

    if (!snapshot.exists()) {
      return res.status(404).json({ error: "Kos√°r nem tal√°lhat√≥." });
    }

    const cart = snapshot.val();

    // Ha van productId, akkor t√∂r√∂lj√ºk a term√©ket a kos√°rb√≥l
    if (productId) {
      const productIndex = cart.items.findIndex((item: any) => item.productId === productId);
      if (productIndex === -1) {
        return res.status(404).json({ error: "A term√©k nem tal√°lhat√≥ a kos√°rban." });
      }

      // T√∂r√∂lj√ºk a term√©ket
      cart.items.splice(productIndex, 1);

      // Ha √ºres a kos√°r, akkor t√∂r√∂lj√ºk a teljes kosarat
      if (cart.items.length === 0) {
        await cartRef.remove();
        return res.status(200).json({ message: "Kos√°r t√∂r√∂lve." });
      }

      // Friss√≠tj√ºk a kosarat
      await cartRef.set(cart);
      return res.status(200).json({ message: "Term√©k t√∂r√∂lve a kos√°rb√≥l.", cart });
    }

    // Ha nincs productId, akkor t√∂r√∂lj√ºk az eg√©sz kosarat
    await cartRef.remove();
    return res.status(200).json({ message: "Kos√°r t√∂r√∂lve." });

  } catch (error) {
    console.error("‚ùå Hiba t√∂rt√©nt a kos√°r t√∂rl√©s√©n√©l:", error);
    return res.status(500).json({ error: "Hiba t√∂rt√©nt a kos√°r t√∂rl√©s√©n√©l." });
  }
};
